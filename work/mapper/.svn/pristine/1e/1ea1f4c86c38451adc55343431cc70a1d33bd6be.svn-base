/* 
 * Copyright 2018 University of Toronto
 *
 * Permission is hereby granted, to use this software and associated 
 * documentation files (the "Software") in course work at the University 
 * of Toronto, or for personal use. Other uses are prohibited, in 
 * particular the distribution of the Software either publicly or to third 
 * parties.
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include "m1.h"
#include "StreetsDatabaseAPI.h"
#include "unordered_map"
#include <vector>
#include <algorithm>
#include <math.h>


//global variables
//hash table for streets: use name as key, vector(store street id) as data
std::unordered_map<std::string, std::vector<unsigned>> streetHT;
//vector for intersections: use index match intersection id, and storing vector of segments id connect to the intersection
std::vector<std::vector<unsigned>> intersectionSeg;
//vector to store vector of seg id connect to each road, index=street id
std::vector<std::vector<unsigned>> streetSeg;




bool load_map(std::string map_path) {
    bool load_successful = false; //Indicates whether the map has loaded 
                                  //successfully
    load_successful=loadStreetsDatabaseBIN(map_path);
    
    if(!load_successful) return false;
    else {
        streetSeg.resize(getNumberOfStreets());
        intersectionSeg.resize(getNumberOfIntersections());
        
        for(unsigned i=0; i<getNumberOfStreetSegments();i++){            
            unsigned from, to, streetID; 
            from=getStreetSegmentInfo(i).from;
            to=getStreetSegmentInfo(i).to;
            streetID=getStreetSegmentInfo(i).streetID;
            auto exist=std::find(intersectionSeg[from].begin(), intersectionSeg[from].end(), i);        
            if(exist==intersectionSeg[from].end())intersectionSeg[from].push_back(i);        
            
            exist=std::find(intersectionSeg[to].begin(), intersectionSeg[to].end(), i);            
            if(exist==intersectionSeg[to].end())intersectionSeg[to].push_back(i);
            
            exist=std::find(streetSeg[streetID].begin(), streetSeg[streetID].end(), i);
            if(exist==streetSeg[streetID].end())streetSeg[streetID].push_back(i); 
        }
        
        for(unsigned i=0; i<getNumberOfStreets();i++){
            std::vector<unsigned> temp{i};
            std::string name=getStreetName(i);
            if(streetHT.find(name)==streetHT.end()) streetHT.emplace(name,temp);
            else if(std::find(streetHT[name].begin(),streetHT[name].end(), i)==streetHT[name].end()) streetHT[name].insert(streetHT[name].end(),i );    
        }
        
    }
    load_successful = true; //Make sure this is updated to reflect whether
                            //loading the map succeeded or failed

    return load_successful;
}

void close_map() {
    //Clean-up your map related data structures here
    closeStreetDatabase(); 
}


//Returns street id(s) for the given street name
//If no street with this name exists, returns a 0-length vector.
std::vector<unsigned> find_street_ids_from_name(std::string street_name){return streetHT[street_name]; }

//Returns the street segments for the given intersection 
std::vector<unsigned> find_intersection_street_segments(unsigned intersection_id){return intersectionSeg[intersection_id];}

//Returns the street names at the given intersection (includes duplicate street 
//names in returned vector)
/* 1. using intersection id to find out the vector with segment id (intersectionSeg)
   2. using segment id to find out the vector of street id (streetSeg)
   3. using street id to find out the vector of street name (streetHT)*/
std::vector<std::string> find_intersection_street_names(unsigned intersection_id){
    std::vector<unsigned> found_intersection_segment_id = intersectionSeg[intersection_id];//vector with segment id(step1))
    std::vector<std::string> street_id_found;
    for(unsigned i=0; i<found_intersection_segment_id.size(); i++){
        unsigned temp=found_intersection_segment_id[i];
        unsigned streetID=getStreetSegmentInfo(temp).streetID;
        street_id_found.push_back(getStreetName(streetID));
    }
   
   
    return street_id_found;
}

//Returns true if you can get from intersection1 to intersection2 using a single 
//street segment (hint: check for 1-way streets too)
//corner case: an intersection is considered to be connected to itself
bool are_directly_connected(unsigned intersection_id1, unsigned intersection_id2){
    //check if the two intersections are the same one
    if (intersection_id1 == intersection_id2)
        return true;
    
    else{
        std::vector<unsigned> adjIn=find_adjacent_intersections(intersection_id1);
        auto exist=std::find(adjIn.begin(), adjIn.end(), intersection_id2);
        if(exist==adjIn.end()) return false;
        else return true;
        
    }
    
}

//Returns all intersections reachable by traveling down one street segment 
//from given intersection (hint: you can't travel the wrong way on a 1-way street)
//the returned vector should NOT contain duplicate intersections
std::vector<unsigned> find_adjacent_intersections(unsigned intersection_id){
    std::vector<unsigned> segs = intersectionSeg[intersection_id];;
    std::vector<unsigned> adj;
    for(unsigned i=0; i<segs.size(); i++){
        StreetSegmentInfo  temp=getStreetSegmentInfo(segs[i]);
        if(temp.from==intersection_id){
            auto exist=std::find(adj.begin(), adj.end(),temp.to);
            if(exist==adj.end())adj.insert(adj.begin(), temp.to);
            
        }
        else if(!temp.oneWay){
            auto exist=std::find(adj.begin(), adj.end(),temp.from);
            if(exist==adj.end())adj.insert(adj.begin(), temp.from);
            
        }
           
    }
    
    return adj;
}

//Returns all street segments for the given street
//Search every segments and find relevant segments by streetID
std::vector<unsigned> find_street_street_segments(unsigned street_id){return streetSeg[street_id];}

//Returns all intersections along the a given street
std::vector<unsigned> find_all_street_intersections(unsigned street_id){
    std::vector<unsigned> intersections;
    std::vector<unsigned> segs=find_street_street_segments(street_id);
    for(unsigned i=0; i<segs.size();i++) {
        if(std::find(intersections.begin(), intersections.end(), getStreetSegmentInfo(segs[i]).from)==intersections.end())
            intersections.insert(intersections.begin(), getStreetSegmentInfo(segs[i]).from);
        if(std::find(intersections.begin(), intersections.end(), getStreetSegmentInfo(segs[i]).to)==intersections.end())
            intersections.insert(intersections.begin(), getStreetSegmentInfo(segs[i]).to);
    
    }

    return intersections;

}

//Return all intersection ids for two intersecting streets
//This function will typically return one intersection id.
//However street names are not guarenteed to be unique, so more than 1 intersection id
//may exist
std::vector<unsigned> find_intersection_ids_from_street_names(std::string street_name1, 
                                                              std::string street_name2){
    std::vector<unsigned> streetID1=find_street_ids_from_name(street_name1);
    std::vector<unsigned> streetID2=find_street_ids_from_name(street_name2);
    std::vector<unsigned> intersections;
    for(unsigned i=0; i<streetID1.size(); i++){
        for(unsigned j=0; j<streetID2.size();j++){
            std::vector<unsigned> itsc1=find_all_street_intersections( streetID1[i]);
            std::vector<unsigned> itsc2=find_all_street_intersections( streetID2[j]);
            for(unsigned k=0; k<itsc1.size();k++){
                if(std::find(itsc2.begin(), itsc2.end(), itsc1[k])!=itsc2.end()){
                    intersections.insert(intersections.begin(), itsc1[k]);
                    
                }
            }
        }
    }
    return intersections;
}

//Returns the distance between two coordinates in meters
double find_distance_between_two_points(LatLon point1, LatLon point2){
    double latavg = cos((point1.lat()+point2.lat())*DEG_TO_RAD/2.0);
    double x1 = point1.lon()*latavg*DEG_TO_RAD;
    double y1 = point1.lat()*DEG_TO_RAD;
    double x2 = point2.lon()*latavg*DEG_TO_RAD;
    double y2 = point2.lat()*DEG_TO_RAD;
    return EARTH_RADIUS_IN_METERS * sqrt(pow((y2 - y1) ,2.0) + pow((x2 - x1) ,2.0));
}

//Returns the length of the given street segment in meters
double find_street_segment_length(unsigned street_segment_id){
    unsigned curve_point_number = getStreetSegmentInfo(street_segment_id).curvePointCount;
    unsigned start_point_ID = getStreetSegmentInfo(street_segment_id).from;
    unsigned end_point_ID = getStreetSegmentInfo(street_segment_id).to;
    if (curve_point_number == 0){
        return find_distance_between_two_points(getIntersectionPosition(start_point_ID), getIntersectionPosition(end_point_ID));
    } else{
        double whole_length = find_distance_between_two_points(getIntersectionPosition(start_point_ID), getStreetSegmentCurvePoint(street_segment_id, 1));
        for (unsigned i = 1; i < curve_point_number; i++) {
            whole_length  = whole_length + find_distance_between_two_points(getStreetSegmentCurvePoint(street_segment_id, i), getStreetSegmentCurvePoint(street_segment_id, i+ 1));
        }
        whole_length  = whole_length + find_distance_between_two_points(getStreetSegmentCurvePoint(street_segment_id, curve_point_number), getIntersectionPosition(end_point_ID));
        return whole_length;
    }
}

//Returns the length of the specified street in meters
double find_street_length(unsigned street_id){
    std::vector<unsigned> seg_list = streetSeg[street_id];
    double street_length = 0.0;
    for (unsigned i = 0; i < seg_list.size(); i ++){
        street_length = street_length + find_street_segment_length(seg_list[i]);
    }
    return street_length;
    
}

//Returns the travel time to drive a street segment in seconds 
//(time = distance/speed_limit)
double find_street_segment_travel_time(unsigned street_segment_id){
    return find_street_segment_length(street_segment_id) / getStreetSegmentInfo(street_segment_id).speedLimit * 3.6;
}

//Returns the nearest point of interest to the given position
unsigned find_closest_point_of_interest(LatLon my_position){
    double distance=std::numeric_limits<float>::infinity();
    unsigned index;
    for(unsigned i=0; i<getNumberOfPointsOfInterest(); i++){
        double temp=find_distance_between_two_points(getPointOfInterestPosition(i), my_position);
        if(temp<distance){ distance=temp; index=i; }
    }

    return index;
}

//Returns the the nearest intersection to the given position
unsigned find_closest_intersection(LatLon my_position){
    double distance=std::numeric_limits<float>::infinity();
    unsigned index;
    for(unsigned i=0; i<getNumberOfIntersections(); i++){
        double temp=find_distance_between_two_points(getIntersectionPosition(i), my_position);
        if(temp<distance){ distance=temp; index=i; }
    }

    return index;
}

