/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include <set>

#include "m1.h"
#include "m3.h"
#include "StreetsDatabaseAPI.h"
#include <vector>
#include <algorithm>
extern std::vector<std::vector<unsigned>> intersectionSeg;

double compute_path_travel_time(const std::vector<unsigned>& path, 
                                const double turn_penalty){
    if(path.size()==0) return -1.0;
    else {
        double tot_time=0;
    
        for(unsigned i=0; i<path.size()-1; i++){
            unsigned Seg_index1=path[i];
            unsigned Seg_index2=path[i+1];
            double time=find_street_segment_travel_time(Seg_index1);
            
            tot_time+=time;
            StreetSegmentInfo temp1=getStreetSegmentInfo(Seg_index1);
            StreetSegmentInfo temp2=getStreetSegmentInfo(Seg_index2);
            if(temp1.streetID!=temp2.streetID) tot_time+=turn_penalty;
        }
        tot_time=tot_time+find_street_segment_travel_time(path[path.size()-1]);
        return tot_time;
    }
}

std::vector<unsigned> available_intersections(unsigned current_int, const std::vector<unsigned>& visited_list){
    std::vector<unsigned> adj_int=find_adjacent_intersections(current_int);
    
    for(unsigned i=0; i<visited_list.size(); i++){
        
            auto result=std::find(adj_int.begin(),adj_int.end(),visited_list[i]);
           
            if(result!=adj_int.end()){
                adj_int.erase(result);
            }
            
        
    }
    return adj_int;
}

std::vector<unsigned> get_available_seg_id(unsigned current, std::vector<unsigned>& avail_int){
    std::vector<unsigned> result;
    std::vector<unsigned> segs=intersectionSeg[current]; 
    
    for(unsigned j= 0; j<avail_int.size(); j++){
        bool a =0;
        for(unsigned i= 0 ; i<segs.size()&&!a;i++){
            unsigned other_end;
            StreetSegmentInfo info=getStreetSegmentInfo(segs[i]);
            
            if(info.from==current)  other_end=info.to;
            else other_end=info.from;
            
            if(other_end==avail_int[j]) {result.push_back(segs[i]);a=1;}
            
        }
    
    
    }
    return result;
}

std::vector<unsigned> find_path_between_intersections(const unsigned intersect_id_start, 
                                                      const unsigned intersect_id_end,
                                                      const double turn_penalty){
    std::vector<unsigned> result;
    std::set<std::pair<double, std::vector<unsigned>>> Queue;
    std::vector<unsigned> visited_list;
    unsigned current=intersect_id_start;
    
    
    std::pair<double, std::vector<unsigned>> first(0, result);
    Queue.emplace(first); 
    
    while(current!=intersect_id_end&&Queue.size()!=0){       
        
        
        double previous_weight=(*Queue.begin()).first;
        
        std::vector<unsigned> previous_path=(*Queue.begin()).second; //record before deleting
        Queue.erase(Queue.begin());             //delete before insert save some time in finding later

        
        std::vector<unsigned> avail_int=available_intersections(current, visited_list);  //check the flag
        std::vector<unsigned> next_seg_vec=get_available_seg_id(current, avail_int);
        unsigned   num_Seg = next_seg_vec.size();   //need to get the available segs form previous line
        //go through all the segs of the current intersection; insert neighbours in queue
        for(unsigned i=0; i<num_Seg; i++){
    
            unsigned seg_index=next_seg_vec[i]; 
            
            double weight=find_street_segment_travel_time(seg_index);  //travel time of seg
            weight=weight+previous_weight;                              //plus the previous
            StreetSegmentInfo info1=getStreetSegmentInfo(seg_index);
            std::vector<unsigned> seg_vector=previous_path;
            if(previous_path.size()!=0){
                unsigned itr0=seg_vector.size()-1;
            
            
                StreetSegmentInfo info2=getStreetSegmentInfo(seg_vector[itr0]);
                if(info2.streetID!=info1.streetID) weight=weight+turn_penalty;          //add turn penalty
            }
            seg_vector.push_back(seg_index);                                 //every time push the new seg to the last 
            std::pair<double, std::vector<unsigned>> weighted_node(weight, seg_vector);     //put new node to queue
            Queue.emplace(weighted_node);
            
    
        }
    visited_list.push_back(current);                                            //set visited flag 
    
    
    //prepare for the next loop 
    
    std::vector<unsigned> temp=((*Queue.begin()).second);                        //start with first in queue   
    int itr=temp.size()-1;                                                        
    
    StreetSegmentInfo info=getStreetSegmentInfo(temp[itr]);
    if(std::find(visited_list.begin(), visited_list.end(),info.from)==visited_list.end()) current=info.from ;                                        //find the new current 
    else current=info.to;
    
    
    }
    if(current==intersect_id_end){
        if(Queue.size()==0) return {};
        
        return (*Queue.begin()).second;
    }
    else return {};
}



std::vector<unsigned> find_path_to_point_of_interest(const unsigned intersect_id_start, 
                                               const std::string point_of_interest_name,
                                               const double turn_penalty){}