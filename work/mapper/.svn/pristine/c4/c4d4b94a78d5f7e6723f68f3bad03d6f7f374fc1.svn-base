/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include <set>

#include "m1.h"
#include "m3.h"
#include "StreetsDatabaseAPI.h"
#include <vector>
#include <algorithm>
#include "unordered_map"
#include "m3_function_declaration.h"
#include <queue>
#include "m1_function_declaration.h"
#include "node.h"
extern std::vector<std::vector<unsigned>> intersectionSeg;
extern std::unordered_map<std::string, std::vector<unsigned>> POIname;
extern std::vector<LatLon> positionPOI;
extern std::vector<LatLon> positionInt;
extern std::vector<StreetSegmentInfo> Seg_Info;

double compute_path_travel_time(const std::vector<unsigned>& path, 
                                const double turn_penalty){
    if(path.size()==0) return -1.0;
    else {
        double tot_time=0;
    
        for(unsigned i=0; i<path.size()-1; i++){
            unsigned Seg_index1=path[i];
            unsigned Seg_index2=path[i+1];
            double time=find_street_segment_travel_time(Seg_index1);
            
            tot_time+=time;
            StreetSegmentInfo temp1=getStreetSegmentInfo(Seg_index1);
            StreetSegmentInfo temp2=getStreetSegmentInfo(Seg_index2);
            if(temp1.streetID!=temp2.streetID) tot_time+=turn_penalty;
        }
        tot_time=tot_time+find_street_segment_travel_time(path[path.size()-1]);
        return tot_time;
    }
}

/*std::vector<unsigned> available_intersections(unsigned current_int, const std::unordered_map<unsigned, node>& visited_list){
    std::vector<unsigned> adj_int=find_adjacent_intersections(current_int);
    std::vector<unsigned> copy=adj_int;
    int deleted=0;
    for(unsigned i=0; i<adj_int.size(); i++){
        
            auto result=visited_list.find(adj_int[i]);
            
            if(result!=visited_list.end()){
                
                copy.erase(copy.begin()+i-deleted);
                deleted++;
            }
            
        
    }
    return copy;
}*/

std::vector<unsigned> available_intersection(unsigned current_int, const std::unordered_map<unsigned,unsigned>& visited_list){
    std::vector<unsigned> adj_int=find_adjacent_intersections(current_int);
    std::vector<unsigned> copy=adj_int;
    int deleted=0;
    for(unsigned i=0; i<adj_int.size(); i++){
        
            auto result=visited_list.find(adj_int[i]);
            
            if(result!=visited_list.end()){
                
                copy.erase(copy.begin()+i-deleted);
                deleted++;
            }
            
        
    }
    return copy;
}
std::vector<unsigned> get_available_seg_id(unsigned current, std::vector<unsigned>& avail_int){
    std::vector<unsigned> result;
    std::vector<unsigned> segs=intersectionSeg[current]; 
    
    for(unsigned j= 0; j<avail_int.size(); j++){
        bool a =0;
        for(unsigned i= 0 ; i<segs.size()&&!a;i++){
            unsigned other_end;
            StreetSegmentInfo info=getStreetSegmentInfo(segs[i]);
            
            if(info.from==current)  other_end=info.to;
            else if(!info.oneWay)other_end=info.from;
            else other_end=-1;
            if(other_end==avail_int[j]) {result.push_back(segs[i]);a=1;segs.erase(segs.begin()+i);}
            
        }
    
    
    }
    return result;
}

std::vector<unsigned> available_segs(unsigned intersection_id,const std::unordered_map<unsigned,node>& visited_list) {
    std::vector<unsigned> segs = intersectionSeg[intersection_id];
   
    std::vector<unsigned> result;
    
    //loop through the segments that connect to the intersection id
    for (unsigned i = 0; i < segs.size(); i++) {
        StreetSegmentInfo temp = Seg_Info[segs[i]];
        //insert the element if this segment is "from" this id
        if (temp.from == intersection_id) {
            if(visited_list.find(temp.to)==visited_list.end())
            result.push_back(segs[i]);
        //if intersection_id is not "from", check if this segment is one-way
        //if is one-way, then insert this element
        } else if (!temp.oneWay) {
            if(visited_list.find(temp.from)==visited_list.end())
            result.push_back(segs[i]); 
        }
    }

    

    return result;
}

std::vector<unsigned> find_path_between_intersections(const unsigned intersect_id_start, 
                                                      const unsigned intersect_id_end,
                                                      const double turn_penalty){
    std::vector<unsigned> result;
    std::priority_queue<std::pair<double, unsigned>, std::vector<std::pair<double, unsigned>>, std::greater<std::pair<double,unsigned>>> Queue; //   weight|intersection_index
    
    std::unordered_map<unsigned, node> visited_list;     //   key:intersection index
    std::unordered_map<unsigned, node> node_list;
    
    unsigned current=intersect_id_start;            //initialize
    unsigned unusedInt=getNumberOfIntersections();  
    unsigned unusedstr=getNumberOfStreetSegments();
    
    std::pair<double, unsigned> first(0, current);
    Queue.emplace(first); 
    
    node start(current,unusedstr,unusedInt,0);
    node_list.emplace(current, start);
           
    
    while(current!=intersect_id_end&&Queue.size()!=0){       
        
        
        double previous_weight=node_list[(Queue.top()).second].weight;
        
       // std::vector<unsigned> previous_node=(Queue.top()).second; //record before deleting
       
        node current_node=node_list[current];
        
        visited_list.emplace(current, current_node);
        
        //std::vector<unsigned> avail_int=available_intersections(current, visited_list);  //check the flag
        std::vector<unsigned> next_seg_vec=available_segs(current, visited_list);
        unsigned   num_Seg = next_seg_vec.size();   //need to get the available segs form previous line
        //go through all the segs of the current intersection; insert neighbours in queue
        for(unsigned i=0; i<num_Seg; i++){
    
            unsigned seg_index=next_seg_vec[i]; 
            unsigned other_end;
            if(Seg_Info[seg_index].from==current) other_end=Seg_Info[seg_index].to;
            else other_end=Seg_Info[seg_index].from;
            double weight=find_street_segment_travel_time(seg_index);  //travel time of seg
            weight=weight+previous_weight;                              //plus the previous
            StreetSegmentInfo info1=Seg_Info[seg_index];
            unsigned n_street_id=info1.streetID;
            
           
            
            if(current_node.from_segID!=unusedstr){
                
                if(Seg_Info[current_node.from_segID].streetID!=n_street_id) weight=weight+turn_penalty;          //add turn penalty
                
            }
            
            
            node next_node(other_end,seg_index,current,weight);
            if(node_list.find(other_end)!=node_list.end()&&node_list[other_end].weight<=next_node.weight){}
            else {node_list.erase(other_end);node_list.emplace(other_end,next_node);}
            
            double distance=find_distance_between_two_point(positionInt[intersect_id_end],positionInt[other_end] );
            
            weight=weight+5*distance;
            
            
            std::pair<double, unsigned> weighted_node(weight, other_end);     //put new node to queue
            Queue.emplace(weighted_node);
            
    
        }
    
    
    
    //prepare for the next loop 
    do{
        Queue.pop();
        if(Queue.empty()){return{};}
        else current=((Queue.top()).second); //start with first in queue 
    }while(visited_list.find(current)!=visited_list.end()); 
    
    }
    
    if(current==intersect_id_end){
        
        std::vector<unsigned> final_path;
        //trace back 
        for(unsigned i=current; i!=intersect_id_start; i=node_list[i].previous_node){
            unsigned last_seg=node_list[i].from_segID;
            final_path.insert(final_path.begin(), last_seg);
        }
        return final_path;
    }
    else return {};
}



std::unordered_map<unsigned, unsigned> find_cloest_int_to_POI(std::vector<unsigned>POI_name_vec){
    std::unordered_map<unsigned, unsigned> result;
    for(unsigned i=0; i<POI_name_vec.size();i++){
        unsigned POIindex=POI_name_vec[i];
        LatLon POI_position=positionPOI[POIindex];
        unsigned Int=find_closest_intersection(POI_position);
        //LatLon  Int_position=positionInt[Int];
        result.emplace(Int,1);
        
        
        
    }
    
    return result;




}




std::vector<unsigned> find_path_to_point_of_interest(const unsigned intersect_id_start, 
                                               const std::string point_of_interest_name,
                                               const double turn_penalty){
    
    //initialization
    std::vector<unsigned> result;
    std::set<std::pair<double, std::vector<unsigned>>> Queue;
    std::unordered_map<unsigned, unsigned> visited_list;                              // change to unorded_map  key:intersection index
    unsigned current=intersect_id_start;
    
    
    std::vector<unsigned> POI_name_vec=POIname[point_of_interest_name]; //getPOI index
    std::unordered_map<unsigned, unsigned> closest_int_to_POI=find_cloest_int_to_POI(POI_name_vec);
    
    
    
    std::pair<double, std::vector<unsigned>> first(0, result);
    Queue.emplace(first); 
    
    while(closest_int_to_POI.find(current)==closest_int_to_POI.end()&&Queue.size()!=0){       
        
        
        double previous_weight=(*Queue.begin()).first;
        
        std::vector<unsigned> previous_path=(*Queue.begin()).second; //record before deleting
        Queue.erase(Queue.begin());             //delete before insert save some time in finding later

        
        std::vector<unsigned> avail_int=available_intersection(current, visited_list);  //check the flag
        std::vector<unsigned> next_seg_vec=get_available_seg_id(current, avail_int);
        unsigned   num_Seg = next_seg_vec.size();   //need to get the available segs form previous line
        //go through all the segs of the current intersection; insert neighbours in queue
        for(unsigned i=0; i<num_Seg; i++){
    
            unsigned seg_index=next_seg_vec[i]; 
            
            double weight=find_street_segment_travel_time(seg_index);  //travel time of seg
            weight=weight+previous_weight;                              //plus the previous
            StreetSegmentInfo info1=getStreetSegmentInfo(seg_index);
            std::vector<unsigned> seg_vector=previous_path;
            if(previous_path.size()!=0){
                unsigned itr0=seg_vector.size()-1;
            
            
                StreetSegmentInfo info2=getStreetSegmentInfo(seg_vector[itr0]);
                if(info2.streetID!=info1.streetID) weight=weight+turn_penalty;          //add turn penalty
            }
            seg_vector.push_back(seg_index);                                 //every time push the new seg to the last 
            std::pair<double, std::vector<unsigned>> weighted_node(weight, seg_vector);     //put new node to queue
            Queue.emplace(weighted_node);
            
    
        }
    visited_list.emplace(current,1);                                            //set visited flag 
    
    
    //prepare for the next loop 
    
    std::vector<unsigned> temp=((*Queue.begin()).second); //start with first in queue 
    
    if(temp.size()==0)  {}
    else{
    int itr=temp.size()-1;                                                        
    
    StreetSegmentInfo info=getStreetSegmentInfo(temp[itr]);
    if(itr==0){
        if(intersect_id_start==info.from)current=info.to;
        else current=info.from;
    }
    else{
    StreetSegmentInfo info1=getStreetSegmentInfo(temp[itr-1]);
    if(info.from==info1.from||info.from==info1.to) current=info.to ;                                        //find the new current 
    else current=info.from;
    }
    }
    }
    if(closest_int_to_POI.find(current)!=closest_int_to_POI.end()){
        if(Queue.size()==0) return {};
        
        return (*Queue.begin()).second;
    }
    else return {};
}


