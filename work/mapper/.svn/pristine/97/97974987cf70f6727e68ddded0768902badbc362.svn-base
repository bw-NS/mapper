#include "m2.h"
#include "graphics.h"
#include <iostream>
#include "m1.h"
#include "StreetsDatabaseAPI.h"
#include <vector>
#include "unordered_map"
#include <unordered_set>
#include <algorithm>
#include <math.h>
#include <iostream>
#include "m2_function_declaration.h"
#include <string>
#include "graphics.cpp"

#include <set>




//load different map according to user command
bool loadmap() {
    bool load_success = false;
    std::string city_name;
    std::cout << "City name in lower case: " << std::endl;
    getline(std::cin, city_name);
    
    //different command cases
    if (city_name == "beijing") load_success = load_map("/cad2/ece297s/public/maps/beijing_china.streets.bin");
    else if (city_name == "cairo") load_success = load_map("/cad2/ece297s/public/maps/cairo_egypt.streets.bin");
    else if (city_name == "cape-town") load_success = load_map("/cad2/ece297s/public/maps/cape-town_south-africa.streets.bin");
    else if (city_name == "golden-horseshoe") load_success = load_map("/cad2/ece297s/public/maps/golden-horseshoe_canada.streets.bin");
    else if (city_name == "hamilton") load_success = load_map("/cad2/ece297s/public/maps/hamilton_canada.streets.bin");
    else if (city_name == "hong-kong") load_success = load_map("/cad2/ece297s/public/maps/hong-kong_china.streets.bin");
    else if (city_name == "iceland") load_success = load_map("/cad2/ece297s/public/maps/iceland.streets.bin");
    else if (city_name == "interlaken") load_success = load_map("/cad2/ece297s/public/maps/interlaken_switzerland.streets.bin");
    else if (city_name == "london") load_success = load_map("/cad2/ece297s/public/maps/london_england.streets.bin");
    else if (city_name == "moscow") load_success = load_map("/cad2/ece297s/public/maps/moscow_russia.streets.bin");
    else if (city_name == "new-delhi") load_success = load_map("/cad2/ece297s/public/maps/new-delhi_india.streets.bin");
    else if (city_name == "new-york") load_success = load_map("/cad2/ece297s/public/maps/new-york_usa.streets.bin");
    else if (city_name == "rio-de-janeiro") load_success = load_map("/cad2/ece297s/public/maps/rio-de-janeiro_brazil.streets.bin");
    else if (city_name == "saint-helena") load_success = load_map("/cad2/ece297s/public/maps/saint-helena.streets.bin");
    else if (city_name == "singapore") load_success = load_map("/cad2/ece297s/public/maps/singapore.streets.bin");
    else if (city_name == "sydney") load_success = load_map("/cad2/ece297s/public/maps/sydney_australia.streets.bin");
    else if (city_name == "tehran") load_success = load_map("/cad2/ece297s/public/maps/tehran_iran.streets.bin");
    else if (city_name == "tokyo") load_success = load_map("/cad2/ece297s/public/maps/tokyo_japan.streets.bin");
    else if (city_name == "toronto") load_success = load_map("/cad2/ece297s/public/maps/toronto_canada.streets.bin");
    
    return load_success;
}

//initial boundary from (minlon, minlat) to (maxlon, maxlat)
t_bound_box bounds() {
    double minlat = positionInt[0].lat();
    double maxlat = positionInt[0].lat();
    double minlon = positionInt[0].lon();
    double maxlon = positionInt[0].lon();

    //get max & min of latitude & longitude of intersection positions
    for (unsigned i = 1; i < positionInt.size(); i++) {
        if (positionInt[i].lat() < minlat) minlat = positionInt[i].lat();
        if (positionInt[i].lat() > maxlat) maxlat = positionInt[i].lat();
        if (positionInt[i].lon() < minlon) minlon = positionInt[i].lon();
        if (positionInt[i].lon() > maxlon) maxlon = positionInt[i].lon();
    }

    //get max & min of latitude & longitude of interests
    for (unsigned p = 0; p < positionPOI.size(); p++) {
        if (positionPOI[p].lat() < minlat) minlat = positionPOI[p].lat();
        if (positionPOI[p].lat() > maxlat) maxlat = positionPOI[p].lat();
        if (positionPOI[p].lon() < minlon) minlon = positionPOI[p].lon();
        if (positionPOI[p].lon() > maxlon) maxlon = positionPOI[p].lon();
    }
    
    AvgLat = (minlat + maxlat) * DEG_TO_RAD / 2;
    t_bound_box bound(minlon * cos(AvgLat), minlat, maxlon * cos(AvgLat), maxlat);

    return bound;
}

//---------------------------------------------------------------search bar feature implement-----------------------------------------------------------------------
//calculate the location of search bar1 in the window
t_bound_box search_bar1_location(){
    
    t_bound_box currentWorld = get_visible_world();
    //the height is (the height of window) / 15
    //the width is (the width of window) * (2/5))
    float sb_width = (currentWorld.get_width()) / 8 * 2;
    float sb_height = -(currentWorld.get_height()) / 35;
    
    //the search bar locates on the top of the window
    t_point sb1_bottom_left;
    sb1_bottom_left.x = currentWorld.left();
    sb1_bottom_left.y = currentWorld.top() + sb_height;
    t_point sb1_upper_right;
    sb1_upper_right.x = sb1_bottom_left.x + sb_width;
    sb1_upper_right.y = currentWorld.top();

    t_bound_box search_bar1(sb1_bottom_left, sb1_upper_right);
    return search_bar1;
}

//calculate the location of search bar2 in the window
t_bound_box search_bar2_location(){
    t_bound_box currentWorld = get_visible_world();   
    //the height is (the height of window) / 15
    //the width is (the width of window) * (2/5))
    float sb_width = (currentWorld.get_width()) / 8 * 2;
    float sb_height = -(currentWorld.get_height()) / 35;
    
    //the search bar locates on the top of the window
    t_point sb2_bottom_left;
    sb2_bottom_left.x = currentWorld.left();
    sb2_bottom_left.y = currentWorld.top() + sb_height * 2;
    t_point sb2_upper_right;
    sb2_upper_right.x = sb2_bottom_left.x + sb_width;
    sb2_upper_right.y = currentWorld.top() + sb_height;

    t_bound_box search_bar2(sb2_bottom_left, sb2_upper_right);
    return search_bar2;
}

//calculate the location of suggestion window 1 of search bar1 in the window
t_bound_box search_bar1_option1_location(){
    t_bound_box currentWorld = get_visible_world();
    
    //the height is (the height of window) / 25
    //the width is (the width of window) * (2/5)
    t_bound_box searchBar1 = search_bar1_location();
    float option_height = -(currentWorld.get_height()) / 35;
    
    //the suggestion windows is right below the search bar
    t_point sb1_bottom_left = searchBar1.bottom_left();
    sb1_bottom_left.offset(0, option_height);
    
    t_point sb1_upper_right = searchBar1.top_right();
    sb1_upper_right.offset(0, -searchBar1.get_height());

    t_bound_box search_bar1(sb1_bottom_left, sb1_upper_right);
    return search_bar1;
}

//calculate the location of suggestion window 1 of search bar1 in the window
t_bound_box search_bar1_option2_location(){
    
    //the height is (the height of window) / 25
    //the width is (the width of window) * (2/5)
    t_bound_box optionBar1 = search_bar1_option1_location();
    float option_height = -optionBar1.get_height();
    
    //the suggestion windows is right below the search bar
    t_point sb1_bottom_left = optionBar1.bottom_left();
    sb1_bottom_left.offset(0, option_height);
    t_point sb1_upper_right = optionBar1.top_right();
    sb1_upper_right.offset(0, option_height);

    t_bound_box search_bar1(sb1_bottom_left, sb1_upper_right);
    return search_bar1;
}

//calculate the location of suggestion window 1 of search bar1 in the window
t_bound_box search_bar2_option1_location(){
    t_bound_box currentWorld = get_visible_world();
    
    //the height is (the height of window) / 25
    //the width is (the width of window) * (2/5)
    t_bound_box searchBar2 = search_bar2_location();
    float option_height = -(currentWorld.get_height()) / 35;
    
    //the suggestion windows is right below the search bar
    t_point sb2_bottom_left = searchBar2.bottom_left();
    sb2_bottom_left.offset(0, option_height);
    
    t_point sb2_upper_right = searchBar2.top_right();
    sb2_upper_right.offset(0, -searchBar2.get_height());

    t_bound_box search_bar2(sb2_bottom_left, sb2_upper_right);
    return search_bar2;
}

//calculate the location of suggestion window 1 of search bar1 in the window
t_bound_box search_bar2_option2_location(){
    //the height is (the height of window) / 25
    //the width is (the width of window) * (2/5)
    t_bound_box optionBar2 = search_bar2_option1_location();
    float option_height = -optionBar2.get_height();
    
    //the suggestion windows is right below the search bar
    t_point sb2_bottom_left = optionBar2.bottom_left();
    sb2_bottom_left.offset(0, option_height);
    t_point sb2_upper_right = optionBar2.top_right();
    sb2_upper_right.offset(0, option_height);

    t_bound_box search_bar2(sb2_bottom_left, sb2_upper_right);
    return search_bar2;
}

t_bound_box change_search_bar_button(){
    float change_width = search_bar1_location().get_width()/5;
    t_point button_bottom_left;
    button_bottom_left.x = search_bar2_location().right();
    button_bottom_left.y = search_bar2_location().bottom();
    t_point button_top_right;
    button_top_right.x = search_bar1_location().right() + change_width;
    button_top_right.y = search_bar1_location().top();
    t_bound_box changeButton(button_bottom_left, button_top_right);
    return changeButton;
}

//check whether mouse click in the specific range
bool check_valid_range(t_point bottom_left, t_point top_right){
    float x_min = bottom_left.x;
    float x_max = top_right.x;
    float y_max = top_right.y;
    float y_min = bottom_left.y;
    if (press_location.x >= x_min && press_location.x <= x_max){
        if (press_location.y >= y_min && press_location.y <= y_max)
            return true;
    }
    return false;
}

//draw the search bar in the window
void draw_search_bar(){
    t_bound_box sb1 = search_bar1_location();
    t_bound_box sb2 = search_bar2_location();
    t_bound_box change = change_search_bar_button();
    
    //draw rec
    setcolor(WHITE); 
    fillrect(sb1);
    fillrect(sb2);
    setcolor(255, 255, 204);
    fillrect(change);
    
    setlinewidth(1);
    setcolor(BLACK);
    drawrect(sb1);
    drawrect(sb2);
    drawrect(change);
      
    setcolor(BLACK);
    settextrotation(0);
    drawtext_in(sb1, "Street 1/POI name: "+searchBar1Text);
    drawtext_in(sb2, "Street 2: "+searchBar2Text);
    drawtext_in(change, "Change");
    
}

//draw information bar
void draw_info_bar(std::string line){
    int previousSize = getfontsize();
    t_bound_box currentWorld = get_visible_world();
    t_point topRight(currentWorld.right(),currentWorld.bottom()+currentWorld.get_height()/18);
    t_bound_box infoBar(currentWorld.bottom_left(),topRight);
    setcolor(WHITE);
    setlinewidth(1);
    drawrect(infoBar);
    fillrect(infoBar);
    setcolor(BLACK);
    settextrotation(0);
    setfontsize(18);
    drawtext_in(infoBar, line);
    setfontsize(previousSize);
}

//do the functionality of find button
void find_button_action(void drawscreen()){
    
    std::string str1 = searchBar1Text;
    std::string str2 = searchBar2Text;

    //input the POI name in search bar1 can search the location
    //can only search the POI with one location
    if (str1 != "" && str2 == ""){//search POI
        if (POIname.find(str1) == POIname.end()){
            std::cout << str1 << std::endl;
            std::cout << str1 << " found!" << std::endl;
        }
        
        else{
        std::vector<unsigned> POI_result = POIname[str1];
        //the content in search bars should be empty after doing searching
        /*int hisSize = searchBar1Text.length();
        char* history1 = new char[hisSize];
        strcpy(history1, searchBar1Text.c_str());
        std::cout << history1 << "123123123" << std::endl;
        if(strcmp(history1, " ") != 0)
            add_history(history1);
        free(history1);
        history1 = NULL;*/
        
        searchBar1Text = "";
        searchBar2Text = "";
        
        //if the POI name is unique, then zoom in to that place in the map
        if (POI_result.size() == 1){  
            unsigned POI_ID = POI_result[0];              
            LatLon temp = positionPOI[POI_ID];
            float center_x = temp.lon() * cos(AvgLat);
            float center_y = temp.lat();
            set_visible_world(center_x-0.00005, center_y-0.00005, center_x+0.00005, center_y+0.00005);
            zoom_level = VERY_CLOSE_LEVEL;
            
            //adjust the zoom level to a proper one
            if (zoom_level < RE_FOCUS_LEVEL) {
               while (zoom_level != RE_FOCUS_LEVEL){
                    zoom_in(drawscreen);
                }
            }
        
            if (zoom_level > RE_FOCUS_LEVEL){
                while (zoom_level != RE_FOCUS_LEVEL){
                    zoom_out(drawscreen);
                }
            }
        }
        
        //de-highlight previous intersection
        drawscreen();
        
        //highlight the found POI
        for (unsigned i = 0; i < (POI_result).size(); i++){
            LatLon POI_temp = positionPOI[POI_result[i]];
           
                //change positionPOI color (highlight)
                t_bound_box currentWorld = get_visible_world();
                setcolor(PURPLE);
                if (currentWorld.intersects(POI_temp.lon() * cos(AvgLat), POI_temp.lat()))
                    fillarc(POI_temp.lon() * cos(AvgLat), POI_temp.lat(), 0.00005, 0, 360);
                
                //display POI information
                std::cout<< str1 <<std::endl;
                std::cout<<"Latitude: "<<getPointOfInterestPosition(POI_result[i]).lat()<<", "
                    <<"Longitude "<<getPointOfInterestPosition(POI_result[i]).lon()<<std::endl;
        }           
        }
    }
    
    else if (str1 != "" && str2 != ""){//do a normal search
        std::vector<unsigned> result = find_intersection_ids_from_street_names(str1, str2);       
        searchBar1Text = "";
        searchBar2Text = "";
        
        //can't find the intersection
        if (result.size() == 0){
            std::cout << "Sorry, there's no intersection between these two streets." << std::endl;
            
        //find out the intersection
        }else{
            //zoom in to the intersection
            unsigned intersectionID = result[0];                
            LatLon temp = positionInt[intersectionID];
            float center_x = temp.lon() * cos(AvgLat);
            float center_y = temp.lat();
            set_visible_world(center_x-0.00003, center_y-0.00003, center_x+0.00003, center_y+0.00003);
            zoom_level = VERY_CLOSE_LEVEL;
                
            if (zoom_level < RE_FOCUS_LEVEL) {
                while (zoom_level != RE_FOCUS_LEVEL){
                    zoom_in(drawscreen);
                }
            
            }else if (zoom_level > RE_FOCUS_LEVEL){
                while (zoom_level != RE_FOCUS_LEVEL){
                    zoom_out(drawscreen);
                }
            }
                               
                //de-highlight previous intersection
                drawscreen();
        
                //change intersection color (highlight)
                t_bound_box currentWorld = get_visible_world();
                setcolor(255,60,60);
                if (currentWorld.intersects(temp.lon() * cos(AvgLat), temp.lat()))
                    fillarc(temp.lon() * cos(AvgLat), temp.lat(), 0.00003, 0, 360);
        
                //display intersection information
                std::cout<<getIntersectionName(intersectionID)<<std::endl;
                std::cout<<"Latitude: "<<getIntersectionPosition(intersectionID).lat()<<", "
                    <<"Longitude "<<getIntersectionPosition(intersectionID).lon()<<std::endl;
            
        }
    }else{//highlight center of the given street
        
    }
}

//do the functionality of suggestion window
std::vector<std::string> findAllSimilarStreet(std::string str){
    std::vector<std::string> result;
    std::unordered_map<std::string, std::vector<unsigned>> allStreet = streetHT;
    
    for (std::pair<std::string, std::vector<unsigned>> kv : allStreet) {
        if (kv.first.find(str) != std::string::npos){
            result.push_back(kv.first);
        }
    }
    return result;
}

//draw the suggestion window
void drawAutoFill(){
    //there exist suggestion that can be displayed for search bar1
    if (searchBar1AutoFill){
        std::string str = searchBar1Text;
        std::vector<std::string> result = findAllSimilarStreet(str);
        
        t_bound_box op1 = search_bar1_option1_location();
        t_bound_box op2 = search_bar1_option2_location();
        //draw rec
        setcolor(255, 255, 204); 
        fillrect(op1);
        fillrect(op2);
        
        setlinewidth(1);
        setcolor(0, 0, 0);
        drawrect(op1);
        drawrect(op2);
        settextrotation(0);
        
        if (result.size() > 1) {//draw the auto fill options
            option1 = result[0];
            option2 = result[1];
            
            setcolor(BLACK);
            drawtext_in(op1, "Suggestion 1: "+option1);
            drawtext_in(op2, "Suggestion 2: "+option2);
            
        }else if (result.size() == 1) {
            option1 = result[0];
            option2 = "No Found";
            
            setcolor(BLACK);
            drawtext_in(op1, "Suggestion 1: "+option1);
            drawtext_in(op2, "Suggestion 2: "+option2);
            
        }else{
            option1 = "No Found";
            option2 = "No Found";
            
            setcolor(BLACK);
            drawtext_in(op1, "Suggestion 1: "+option1);
            drawtext_in(op2, "Suggestion 2: "+option2);
        };
        
        //there exists suggestion that can be displayed for search bar2
    }else if (searchBar2AutoFill){
        std::string str = searchBar2Text;
        std::vector<std::string> result = findAllSimilarStreet(str);
        
        t_bound_box op1 = search_bar2_option1_location();
        t_bound_box op2 = search_bar2_option2_location();
        //draw rec
        setcolor(255, 255, 204); 
        fillrect(op1);
        fillrect(op2); 
        
        setcolor(0, 0, 0);
        drawrect(op1);
        drawrect(op2);
        settextrotation(0);
        
        if (result.size() > 1) {//draw the auto fill options
            option1 = result[0];
            option2 = result[1];
            
            setcolor(BLACK);
            drawtext_in(op1, "Suggestion 1: "+option1);
            drawtext_in(op2, "Suggestion 2: "+option2);
            
        }else if (result.size() == 1) {
            option1 = result[0];
            option2 = "No Found";
    
            setcolor(BLACK);
            drawtext_in(op1, "Suggestion 1: "+option1);
            drawtext_in(op2, "Suggestion 2: "+option2);
            
        }else{
            option1 = "No Found";
            option2 = "No Found";
            
            setcolor(BLACK);
            drawtext_in(op1, "Suggestion 1: "+option1);
            drawtext_in(op2, "Suggestion 2: "+option2);
        };
        
    }else{
        return;
    }
}

void autoComplete() {
    if (searchBar1AutoFill){
        if (selectSb1Op1){
            selectSb1Op1 = false;
            if (option1 == "No Found"){               
                std::cout << "Can Complete 'No Found'!" << std::endl; 
                return;
            }
            searchBar1Text = option1;
            draw_search_bar();
            drawscreen();
            searchBar1Editing = false;           
            return;
        }
        if (selectSb1Op2){
            selectSb1Op2 = false;
            if (option2 == "No Found"){
                std::cout << "Can Complete 'No Found'!" << std::endl;
                return;
            }
            searchBar1Text = option2;          
            draw_search_bar();
            drawscreen();
            searchBar1Editing = false; 
            return;
        }        
    }
    if (searchBar2AutoFill){
        if (selectSb2Op1){
            selectSb2Op1 = false;
            if (option1 == "No Found"){               
                std::cout << "Can Complete 'No Found'!" << std::endl;
                return;
            }
            searchBar2Text = option1;
            draw_search_bar();
            drawscreen();
            searchBar2Editing = false; 
            return;
        }
        if (selectSb2Op2){
            selectSb2Op2 = false;
            if (option2 == "No Found"){
                std::cout << "Can Complete 'No Found'!" << std::endl;
                return;
            }
            searchBar2Text = option2;          
            draw_search_bar();
            drawscreen();
            searchBar2Editing = false;
            return;
        }        
    }
}


//--------------------------------------------------------reaction functions to mouse and keyboard-------------------------------------------------------------------------
void act_on_button_press(float x, float y, t_event_buttonPressed event){
    if (event.button == 1) {
        
        t_bound_box sb1 = search_bar1_location();
        t_bound_box sb2 = search_bar2_location();
        t_bound_box sb1_op1 = search_bar1_option1_location();
        t_bound_box sb1_op2 = search_bar1_option2_location();
        t_bound_box sb2_op1 = search_bar2_option1_location();
        t_bound_box sb2_op2 = search_bar2_option2_location();
        press_location.x = x;
        press_location.y = y;
    
        if (check_valid_range(sb1.bottom_left(), sb1.top_right())) { //pressed in search bar 1 area
            searchBar1Editing = true;
            searchBar2Editing = false;
            
            drawscreen();
            searchBar2AutoFill = false;
            if (searchBar1Text.length() >= 2){
                searchBar1AutoFill = true;
                searchBar2AutoFill = false;
                drawAutoFill();               
            }
            
        }
        else if (check_valid_range(sb1_op1.bottom_left(), sb1_op1.top_right()) && searchBar1Editing){
                        selectSb1Op1 = true;
                        autoComplete();
                    }
        else if (check_valid_range(sb1_op2.bottom_left(), sb1_op2.top_right()) && searchBar1Editing){
                        selectSb1Op2 = true;
                        autoComplete();
        }
        else if (check_valid_range(search_bar2_location().bottom_left(), search_bar2_location().top_right())){ //pressed in search bar 2 area
            searchBar1Editing = false;
            searchBar2Editing = true;
            
            drawscreen();
            searchBar1AutoFill = false;
            if (searchBar2Text.length() >= 2){
                searchBar1AutoFill = false;
                searchBar2AutoFill = true;
                drawAutoFill();
            }
        }
        else if (check_valid_range(sb2_op1.bottom_left(), sb2_op1.top_right()) && searchBar2Editing){
                    selectSb2Op1 = true;                                   
                    autoComplete();
        }
        else if (check_valid_range(sb2_op2.bottom_left(), sb2_op2.top_right()) && searchBar2Editing) {
                    selectSb2Op2 = true;
                    autoComplete();
        }
        else{
            searchBar1Editing = false;
            searchBar2Editing = false;
            searchBar1AutoFill = false;
            searchBar2AutoFill = false;
            
            //click to highlight intersection and show the name of intersection
            LatLon currentPosition(y,x/cos(AvgLat));
            unsigned intersectionID;
            intersectionID = find_closest_intersection(currentPosition);
            //de-highlight previous intersection
            drawscreen();
        
            //change intersection color (highlight)
            t_bound_box currentWorld = get_visible_world();
            LatLon temp = positionInt[intersectionID];
            setcolor(255,60,60);
            if (currentWorld.intersects(temp.lon() * cos(AvgLat), temp.lat()))
                fillarc(temp.lon() * cos(AvgLat), temp.lat(), 0.00003, 0, 360);
        
            //display intersection information
            std::string name = getIntersectionName(intersectionID);
            auto lat = std::to_string(getIntersectionPosition(intersectionID).lat());
            auto lon = std::to_string(getIntersectionPosition(intersectionID).lon());
            std::string position = lat + ", " + lon;
            std::string info =  name + " (" + position + ")"; 
            draw_info_bar(info);
            }
        
    }   
}

void act_on_mouse_move(float x, float y){}

void act_on_key_press(char c, int keysym){
    
    
    if (searchBar1Editing){
        if (keysym == XK_BackSpace){ //keysum for delete
            if (searchBar1Text != ""){
                searchBar1Text.pop_back();
            }
        }else if (keysym == XK_Caps_Lock){
        }else if (keysym == XK_Shift_L){
        }else if (keysym == XK_Shift_R){
        }else{
            searchBar1Text += c;
            
        }
        draw_search_bar();
        
        
        searchBar1AutoFill = true;
        drawAutoFill();
        
    }
    
    if (searchBar2Editing){
        if (keysym == XK_BackSpace){ //keysum for delete
            if (searchBar2Text != ""){
                searchBar2Text.pop_back();
            }
        }else if (keysym == XK_Caps_Lock){
        }else if (keysym == XK_Shift_L){
        }else if (keysym == XK_Shift_R){
        }else{
          searchBar2Text += c;
        }
        draw_search_bar();
        
        searchBar2AutoFill = true;
        drawAutoFill();
        
    }
    
    
}

//--------------------------------------------------------------------draw screen and map-------------------------------------------------------------------------
void drawscreen() {
    clearscreen();
    drawFeature();
    drawRoad();
    drawIntersect();
    drawPOI();
    drawNames();
    draw_search_bar();
    draw_help_button();
    
    
}

void draw_map() {
    bool load_success = loadmap();
    
    //check if load map successfully
    if (!load_success) {
        std::cout << "Load map failed." << std::endl;
        return;
    }
    
    t_color background(232, 232, 232);
    init_graphics("City map", background);
    t_bound_box bound = bounds();
    set_visible_world(bound);
    set_keypress_input(true);
    set_mouse_move_input(true);
    create_button("Window", "Find", find_button_action);
    create_button("Find", "Show POI",show_point_of_interest);
    event_loop(act_on_button_press, act_on_mouse_move, act_on_key_press, drawscreen);
    
    close_graphics();
}

//--------------------------------------------------------------------drawing functions---------------------------------------------------------------------------

//function to draw the roads
void drawRoad() {
    t_bound_box currentWorld = get_visible_world();
    t_color road_color(255, 250, 250);
    setcolor(road_color);
    
    for (unsigned i = 0; i < streetSeg.size(); i++) {
        for (unsigned j = 0; j < streetSeg[i].size(); j++) {
            StreetSegmentInfo temp = getStreetSegmentInfo(streetSeg[i][j]);
            unsigned curve_point_number = temp.curvePointCount;
            
            double xf = positionInt[temp.from].lon() * cos(AvgLat);
            double yf = positionInt[temp.from].lat();
                    
            double xt = positionInt[temp.to].lon() * cos(AvgLat);
            double yt = positionInt[temp.to].lat();

            if ((currentWorld.intersects(xf, yf) || currentWorld.intersects(xt, yt))) {
                if(curve_point_number==0){
                    if (temp.speedLimit >= EXPRESSWAY_SPEED) {
                        if (zoom_level >= ROAD_ZOOM_LEVEL) setlinewidth(zoom_level-1+ROAD_DIFFERENCE);
                        else setlinewidth(2);
                        setcolor(255,225,0);
                        drawline(xf, yf, xt, yt);
                    } else if (temp.speedLimit >= MAJOR_SPEED) {
                        if (zoom_level >= ROAD_ZOOM_LEVEL) setlinewidth(zoom_level-1);
                        else setlinewidth(1);
                        setcolor(255,255,240);
                        drawline(xf, yf, xt, yt);
                    } else {
                        if (zoom_level >= ROAD_ZOOM_LEVEL) setlinewidth(zoom_level-1-ROAD_DIFFERENCE);
                        else setlinewidth(0);
                        setcolor(WHITE);
                        if (zoom_level >= 3)drawline(xf, yf, xt, yt);
                    }
                }
            else {
                bool draw=false;
                if ((currentWorld.intersects(xf, yf) || currentWorld.intersects(xt, yt))) draw=1;
                else{
                    for(unsigned p=0; p<curve_point_number&&!draw;p++){
                        double x = getStreetSegmentCurvePoint(streetSeg[i][j], p).lon() * cos(AvgLat);
                        double y = getStreetSegmentCurvePoint(streetSeg[i][j], p).lat();
                        if(currentWorld.intersects(x, y)) draw=1;
                    }
                }
                if(draw){
                    if (temp.speedLimit >= EXPRESSWAY_SPEED) {
                        if (zoom_level >= ROAD_ZOOM_LEVEL) setlinewidth(zoom_level+ROAD_DIFFERENCE);
                        else setlinewidth(2);
                        setcolor(255,225,0);
                        
                        LatLon first=getStreetSegmentCurvePoint(streetSeg[i][j], 0);
                        drawline(xf,yf, first.lon() * cos(AvgLat),first.lat());
                        for (unsigned p = 0; p < curve_point_number - 1; p++) {
                            LatLon Cfrom=getStreetSegmentCurvePoint(streetSeg[i][j], p);
                            LatLon Cto=getStreetSegmentCurvePoint(streetSeg[i][j], p + 1);
                            drawline(   Cfrom.lon()* cos(AvgLat),  Cfrom.lat(),  Cto.lon()* cos(AvgLat),  Cto.lat());
                        }
                        LatLon last=getStreetSegmentCurvePoint(streetSeg[i][j], curve_point_number - 1);
                        drawline(last.lon()* cos(AvgLat),last.lat(), xt,yt);
                        
                    } else if (temp.speedLimit >= MAJOR_SPEED) {
                        if (zoom_level >= ROAD_ZOOM_LEVEL) setlinewidth(zoom_level);
                        else setlinewidth(1);
                        setcolor(255,255,240);
                        
                        LatLon first=getStreetSegmentCurvePoint(streetSeg[i][j], 0);
                        drawline(xf,yf, first.lon() * cos(AvgLat),first.lat());
                        for (unsigned p = 0; p < curve_point_number - 1; p++) {
                            LatLon Cfrom=getStreetSegmentCurvePoint(streetSeg[i][j], p);
                            LatLon Cto=getStreetSegmentCurvePoint(streetSeg[i][j], p + 1);
                            drawline(   Cfrom.lon()* cos(AvgLat),  Cfrom.lat(),  Cto.lon()* cos(AvgLat),  Cto.lat());
                        }
                        LatLon last=getStreetSegmentCurvePoint(streetSeg[i][j], curve_point_number - 1);
                        drawline(last.lon()* cos(AvgLat),last.lat(), xt,yt);
                        
                    } else {
                        if (zoom_level >= ROAD_ZOOM_LEVEL) setlinewidth(zoom_level-ROAD_DIFFERENCE);
                        else setlinewidth(0);
                        setcolor(WHITE);
                        if (zoom_level >= 3) {
                           LatLon first=getStreetSegmentCurvePoint(streetSeg[i][j], 0);
                            drawline(xf,yf, first.lon() * cos(AvgLat),first.lat());
                            for (unsigned p = 0; p < curve_point_number - 1; p++) {
                                LatLon Cfrom=getStreetSegmentCurvePoint(streetSeg[i][j], p);
                                LatLon Cto=getStreetSegmentCurvePoint(streetSeg[i][j], p + 1);
                                drawline(   Cfrom.lon()* cos(AvgLat),  Cfrom.lat(),  Cto.lon()* cos(AvgLat),  Cto.lat());
                            }
                            LatLon last=getStreetSegmentCurvePoint(streetSeg[i][j], curve_point_number - 1);
                            drawline(last.lon()* cos(AvgLat),last.lat(), xt,yt);                 
                        }
                    }
                    
                    
                }   
                
            }
                
            }
            
        }

    }
}


//--------------------------drawing Features & help functions-------------------------

//function to draw open features 
void openFeature(unsigned i) {
    int number_of_point = getFeaturePointCount(i);

    for (int j = 0; j < number_of_point - 1; j++) {
        LatLon from = getFeaturePoint(i, j);
        LatLon to = getFeaturePoint(i, j + 1);
        drawline(from.lon() * cos(AvgLat), from.lat(), to.lon() * cos(AvgLat), to.lat());
    }
}

//function to draw close features 
void closeFeature(unsigned i) {
    int number_of_point = getFeaturePointCount(i);

    t_point latlonArray[number_of_point];
    for (int j = 0; j < number_of_point; j++) {
        LatLon temp = getFeaturePoint(i, j);
        t_point points(temp.lon() * cos(AvgLat), temp.lat());
        latlonArray[j] = points;
    }
    fillpoly(latlonArray, number_of_point);
}

//function to judge if a feature is closed
bool Feature_close(unsigned FeatureID) {
    bool close = false;
    LatLon Start, End;
    int number_of_point = getFeaturePointCount(FeatureID);
    
    Start = getFeaturePoint(FeatureID, 0);
    End = getFeaturePoint(FeatureID, number_of_point - 1);
    
    if (Start.lat() == End.lat() && Start.lon() == End.lon()) close = true;
    return close;
}

t_color color_of_type(FeatureType type);

t_color color_of_type(FeatureType type){
    t_color color_chosen;
    if(type==Park||type==Greenspace||type==Golfcourse||type==Island) {t_color temp(200, 238, 185);color_chosen=temp;}
    else if(type==Unknown||type==Beach||type==Building){t_color temp(253, 245, 226);color_chosen=temp;}
    else {t_color temp(170, 218, 255);color_chosen=temp;}
    return color_chosen;
}

void drawFeature() {
    //draw closed feature first in the order of decending
    int size_of_area=area_of_index.size();
    for(int i=size_of_area; i>=0; i--){
        long double area=area_of_index[i].first;
        unsigned feature_index=area_of_index[i].second;
        FeatureType type=feature_type[feature_index];
        t_color color=color_of_type(type);
        setcolor(color);
        if(area>=0.00001)closeFeature(feature_index);
        else if(zoom_level>=3&&zoom_level<5&&area>=0.0000001)closeFeature(feature_index);
        else if(zoom_level>=5)closeFeature(feature_index);
    }
    //draw open feature next
    for(unsigned i=0; i<openfeatures.size();i++){
        unsigned feature_index=openfeatures[i];
        FeatureType type=feature_type[feature_index];
        t_color color=color_of_type(type);
        setcolor(color);
        if(zoom_level>=3) openFeature(feature_index);
    }
   
}

//-------------------------------intersection & POI------------------------------
void drawIntersect() {
    t_bound_box currentWorld = get_visible_world();
    for (unsigned i = 0; i < positionInt.size(); i++) {
        LatLon temp = positionInt[i];
        setcolor(150,225,255);
        if (currentWorld.intersects(temp.lon() * cos(AvgLat), temp.lat()))
            fillarc(temp.lon() * cos(AvgLat), temp.lat(), 0.00003, 0, 360);
    }
}

void drawPOI() {
    t_bound_box currentWorld = get_visible_world();
    if(showPOI){
    for (unsigned i = 0; i < positionPOI.size(); i++) {
        LatLon temp = positionPOI[i];
        setcolor(ORANGE);
        if (currentWorld.intersects(temp.lon() * cos(AvgLat), temp.lat())) fillarc(temp.lon() * cos(AvgLat), temp.lat(), 0.0001, 0, 360);
    }
    }
}

//--------------------------display names---------------------------------
void drawNames() {
    if (zoom_level >= DETAILED_LEVEL) {//only show names in detailed level
        drawStreetNames();
        drawFeatureNames();
        drawPOINames();
    }
}

void drawStreetNames() {
    if (zoom_level >= DETAILED_LEVEL) {
        t_bound_box currentWorld = get_visible_world();
        int angle;
        setcolor(BLACK);
        //go to each segments of street
        for (unsigned i = 0; i < streetSeg.size(); i++) {
            for (unsigned j = 0; j < streetSeg[i].size(); j++) {
                StreetSegmentInfo temp = getStreetSegmentInfo(streetSeg[i][j]);
                double xf = positionInt[temp.from].lon() * cos(AvgLat);
                double yf = positionInt[temp.from].lat();
                double xt = positionInt[temp.to].lon() * cos(AvgLat);
                double yt = positionInt[temp.to].lat();
                unsigned num_curve=temp.curvePointCount;
                
                if(num_curve==0){
                if (currentWorld.intersects(xf, yf)||currentWorld.intersects(xt, yt) ){
                std::string tempName = getStreetName(temp.streetID);
                t_point center((xf + xt) / 2, (yf + yt) / 2);
                angle = atan((yf - yt) / (xf - xt)) / DEG_TO_RAD;
                double length = find_distance_between_two_points(positionInt[temp.from], positionInt[temp.to]);
                int nameLength = tempName.length();
                
                //display names on different zoom levels
                if (tempName != "<unknown>" && length * TEXT_TOLERANCE > nameLength) {
                    if (temp.oneWay) tempName = tempName + "->";
                    settextrotation(angle);
                    drawtext(center, tempName, 0.01, 0.01);
                } else if (zoom_level >= MORE_DETAILED_LEVEL && tempName != "<unknown>"&&length * 0.13*zoom_level > nameLength) {
                    if (temp.oneWay) tempName = tempName + "->";
                    settextrotation(angle);
                    drawtext(center, tempName, 0.01, 0.01);
                } else if (temp.oneWay && zoom_level >= DETAILED_LEVEL) {
                    settextrotation(angle);
                    drawtext(center, "-->", 0.01, 0.01);
                }
                //reset rotation
                settextrotation(0);
                }
            }
                else{
                    bool draw=0;
                    if (currentWorld.intersects(xf, yf)||currentWorld.intersects(xt, yt) ) draw=1;
                    else{
                        for(unsigned p=0; p<num_curve&&!draw;p++){
                            double x = getStreetSegmentCurvePoint(streetSeg[i][j], p).lon() * cos(AvgLat);
                            double y = getStreetSegmentCurvePoint(streetSeg[i][j], p).lat();
                            if(currentWorld.intersects(x, y)) draw=1;
                        }
                    }
                    if(draw==1){    
                        std::string tempName = getStreetName(temp.streetID);
                        
                        double x = getStreetSegmentCurvePoint(streetSeg[i][j], 0).lon() * cos(AvgLat);
                        double y = getStreetSegmentCurvePoint(streetSeg[i][j], 0).lat();
                        
                        t_point center((xf + x) / 2, (yf + y) / 2);
                        angle = atan((yf - y) / (xf - x)) / DEG_TO_RAD;
                        
                        double length0 = find_distance_between_two_points(positionInt[temp.from], getStreetSegmentCurvePoint(streetSeg[i][j], 0));
                        
                        int nameLength0 = tempName.length();
                            if (tempName != "<unknown>" && length0 * TEXT_TOLERANCE > nameLength0) {
                                if (temp.oneWay) tempName = tempName + "->";
                                settextrotation(angle);
                                drawtext(center, tempName, 0.01, 0.01);
                            } else if (zoom_level >= MORE_DETAILED_LEVEL && tempName != "<unknown>"&&length0*0.1*zoom_level  > nameLength0) {
                                if (temp.oneWay) tempName = tempName + "->";
                                settextrotation(angle);
                                drawtext(center, tempName, 0.01, 0.01);
                            } else if (temp.oneWay && zoom_level >= DETAILED_LEVEL&&(length0*0.05*zoom_level > 2)) {
                                settextrotation(angle);
                                drawtext(center, "->", 0.01, 0.01);
                            }
                            //reset rotation
                            settextrotation(0);
                            
                        for(unsigned p=0; p<num_curve-1;p++){
                            std::string tempName = getStreetName(temp.streetID);
                            double x1 = getStreetSegmentCurvePoint(streetSeg[i][j], p).lon() * cos(AvgLat);
                            double y1 = getStreetSegmentCurvePoint(streetSeg[i][j], p).lat();
                            double x2 = getStreetSegmentCurvePoint(streetSeg[i][j], p+1).lon() * cos(AvgLat);
                            double y2 = getStreetSegmentCurvePoint(streetSeg[i][j], p+1).lat();
                            t_point center((x1 + x2) / 2, (y1 + y2) / 2);
                            angle = atan((y1 - y2) / (x1 - x2)) / DEG_TO_RAD;
                            double length = find_distance_between_two_points(getStreetSegmentCurvePoint(streetSeg[i][j], p), getStreetSegmentCurvePoint(streetSeg[i][j], p+1));
                            int nameLength = tempName.length();
                            
                            if (tempName != "<unknown>" && length * TEXT_TOLERANCE > nameLength) {
                                if (temp.oneWay) tempName = tempName + "->";
                                settextrotation(angle);
                                drawtext(center, tempName, 0.01, 0.01);
                            } else if (zoom_level >= MORE_DETAILED_LEVEL && tempName != "<unknown>"&&length*0.13*zoom_level  > nameLength) {
                                if (temp.oneWay) tempName = tempName + "->";
                                settextrotation(angle);
                                drawtext(center, tempName, 0.01, 0.01);
                            } else if (temp.oneWay && zoom_level >= DETAILED_LEVEL&&(length*0.05*zoom_level > 2)) {
                                settextrotation(angle);
                                drawtext(center, "->", 0.01, 0.01);
                            }
                            //reset rotation
                            settextrotation(0);
                            
                        }
                        double x0 = getStreetSegmentCurvePoint(streetSeg[i][j], num_curve-1).lon() * cos(AvgLat);
                        double y0 = getStreetSegmentCurvePoint(streetSeg[i][j], num_curve-1).lat();
                        
                        t_point center0((xt + x0) / 2, (yt + y0) / 2);
                        angle = atan((yt - y0) / (xt - x0)) / DEG_TO_RAD;
                        
                        double length1 = find_distance_between_two_points(positionInt[temp.to], getStreetSegmentCurvePoint(streetSeg[i][j],num_curve-1 ));
                        
                        int nameLength1 = getStreetName(temp.streetID).length();
                            if (tempName != "<unknown>" && length1 * TEXT_TOLERANCE > nameLength1) {
                                if (temp.oneWay) tempName = tempName + "->";
                                settextrotation(angle);
                                drawtext(center0, tempName, 0.01, 0.01);
                            } else if (zoom_level >= MORE_DETAILED_LEVEL && tempName != "<unknown>"&&(length1*0.1*zoom_level > nameLength1)) {
                                if (temp.oneWay) tempName = tempName + "->";
                                settextrotation(angle);
                                drawtext(center0, tempName, 0.01, 0.01);
                            } else if (temp.oneWay && zoom_level >= DETAILED_LEVEL&&(length1*0.05*zoom_level > 2)) {
                                settextrotation(angle);
                                drawtext(center0, "->", 0.01, 0.01);
                            }
                            //reset rotation
                            settextrotation(0);
                            
                            
                    }
                    
                
                }
            }
        }
    }
}

int find_feature_longest_edge_angle(unsigned i);
int find_feature_longest_edge_angle(unsigned i){
    int num_of_points= getFeaturePointCount(i);
    LatLon temp1=getFeaturePoint(i, 0);
    LatLon temp2=getFeaturePoint(i, 1);
    int longest_index;
    double max_length=(temp1.lon()* cos(AvgLat)-temp2.lon()* cos(AvgLat))*(temp1.lon()* cos(AvgLat)-temp2.lon()* cos(AvgLat))+(temp1.lat()-temp2.lat())*(temp1.lat()-temp2.lat());
    for(int j=1; j<num_of_points-1;j++){
        LatLon temp3=getFeaturePoint(i, j);
        LatLon temp4=getFeaturePoint(i, j+1);
        double length=(temp3.lon()* cos(AvgLat)-temp4.lon()* cos(AvgLat))*(temp3.lon()* cos(AvgLat)-temp4.lon()* cos(AvgLat))+(temp3.lat()-temp4.lat())*(temp3.lat()-temp4.lat());
        if(length>max_length) {
            max_length=length;
            longest_index=j;
        }
        
    }
    int angle = atan(( getFeaturePoint(i, longest_index).lat()- getFeaturePoint(i, longest_index+1).lat()) / ((getFeaturePoint(i, longest_index).lon()* cos(AvgLat)  - getFeaturePoint(i, longest_index+1).lon()* cos(AvgLat) ))) / DEG_TO_RAD;
    return angle;
}

void drawFeatureNames() {
    t_bound_box currentWorld = get_visible_world();
    setcolor(BLACK);
    int angle=0;
    for (unsigned i = 0; i < getNumberOfFeatures(); i++) {
        bool draw = false;
        if (getFeatureName(i) == "<noname>");
        else {
            for (unsigned j = 0; j < getFeaturePointCount(i)&&!draw; j++) {
                LatLon temp = getFeaturePoint(i, j);
                if (currentWorld.intersects(temp.lon() * cos(AvgLat), temp.lat())) draw = true;
            }
            if (draw) {
                if (Feature_close(i) && zoom_level >= DETAILED_LEVEL) {
                    setfontsize(zoom_level-1);
                    t_point center = find_center(i);
           //         angle=find_feature_longest_edge_angle(i);
            //        settextrotation(angle);
                    drawtext(center, getFeatureName(i), 0.01, 0.01);

                } else if (!Feature_close(i) && zoom_level >= MORE_DETAILED_LEVEL) {
                    for (unsigned j = 0; j < getFeaturePointCount(i) - 1; j++) {
                        LatLon from = getFeaturePoint(i, j);
                        LatLon to = getFeaturePoint(i, j + 1);
                        t_point center((from.lon() * cos(AvgLat) + to.lon()* cos(AvgLat)) / 2, (from.lat()  + to.lat()) / 2);
                        setfontsize(zoom_level-1);
                        angle = atan((from.lat() - to.lat()) / (from.lon() * cos(AvgLat) - to.lon()* cos(AvgLat))) / DEG_TO_RAD;
                        settextrotation(angle);
                        drawtext(center, getFeatureName(i), 0.01, 0.01);
                    }
                }
            }
        }
        settextrotation(0);
    }
}

//function to find center of a feature
t_point find_center(unsigned i) {
    unsigned numOfPoints = getFeaturePointCount(i);
    double x = 0.0, y = 0.0;
    for (unsigned j = 0; j < numOfPoints; j++) {
        LatLon temp = getFeaturePoint(i, j);
        x += temp.lon() * cos(AvgLat);
        y += temp.lat();
    }
    t_point center(x / numOfPoints, y / numOfPoints);
    return center;
}

void drawPOINames() {
    t_bound_box currentWorld = get_visible_world();
    setcolor(BLACK);
    setfontsize(8);
    if (zoom_level >= MORE_DETAILED_LEVEL && showPOI)
        for (unsigned i = 0; i < positionPOI.size(); i++) {
            LatLon temp = positionPOI[i];
            if (currentWorld.intersects(temp.lon() * cos(AvgLat), temp.lat())) {
                std::string POIname = getPointOfInterestName(i);

                drawtext(temp.lon() * cos(AvgLat), temp.lat(), POIname, 0.01, 0.01);
            }
        }
}

//function to show & hide POI
void show_point_of_interest(void drawscreen()) {
    if (!showPOI) showPOI = true;
    else showPOI = false;
    drawscreen();
}

//function to highlight path
void highlight_path(std::vector<unsigned> segmentSet) {
    t_bound_box currentWorld = get_visible_world();
    t_color highlight_color(255, 60, 60);
    setcolor(highlight_color);

    for (unsigned i = 0; i < segmentSet.size(); i++) {
        StreetSegmentInfo temp = getStreetSegmentInfo(segmentSet[i]);
        unsigned curve_point_number = temp.curvePointCount;

        double xf = positionInt[temp.from].lon() * cos(AvgLat);
        double yf = positionInt[temp.from].lat();

        double xt = positionInt[temp.to].lon() * cos(AvgLat);
        double yt = positionInt[temp.to].lat();

        if ((currentWorld.intersects(xf, yf) || currentWorld.intersects(xt, yt))) {
            if (curve_point_number == 0) {
                if (zoom_level >= ROAD_ZOOM_LEVEL) setlinewidth(zoom_level - 1 + ROAD_DIFFERENCE);
                else setlinewidth(2);
                drawline(xf, yf, xt, yt);
            } else {
                bool draw = false;
                if ((currentWorld.intersects(xf, yf) || currentWorld.intersects(xt, yt))) draw = 1;
                else {
                    for (unsigned p = 0; p < curve_point_number&&!draw; p++) {
                        double x = getStreetSegmentCurvePoint(segmentSet[i], p).lon() * cos(AvgLat);
                        double y = getStreetSegmentCurvePoint(segmentSet[i], p).lat();
                        if (currentWorld.intersects(x, y)) draw = 1;
                    }
                }
                if (draw) {
                    LatLon first = getStreetSegmentCurvePoint(segmentSet[i], 0);
                    drawline(xf, yf, first.lon() * cos(AvgLat), first.lat());
                    for (unsigned p = 0; p < curve_point_number - 1; p++) {
                        LatLon Cfrom = getStreetSegmentCurvePoint(segmentSet[i], p);
                        LatLon Cto = getStreetSegmentCurvePoint(segmentSet[i], p + 1);
                        drawline(Cfrom.lon() * cos(AvgLat), Cfrom.lat(), Cto.lon() * cos(AvgLat), Cto.lat());
                    }
                    LatLon last = getStreetSegmentCurvePoint(segmentSet[i], curve_point_number - 1);
                    drawline(last.lon() * cos(AvgLat), last.lat(), xt, yt);
                }
            }
        }
    }
}

//-------------------------------------------------------------------------help button-------------------------------------------------------------
void draw_help_button(){
    float hb_width = (get_visible_world().get_width()) * 0.05;
    float hb_height = (get_visible_world().get_height()) * 0.01;
    //float hb_left = (get_visible_world().right()) - (get_visible_world().get_width()/15);
    float hb_left = get_visible_world().right() - hb_width;
    float hb_upper = get_visible_world().top() - hb_height;
    t_point hb(hb_left, hb_upper);
    draw_surface(load_png_from_file("libstreetmap/src/test1.png"), hb);
}
