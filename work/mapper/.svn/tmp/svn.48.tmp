/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   m2_function_declaration.h
 * Author: haojinze
 *
 * Created on February 23, 2018, 8:19 PM
 */

#ifndef M2_FUNCTION_DECLARATION_H
#define M2_FUNCTION_DECLARATION_H

#include "OSMEntity.h"
#include "OSMNode.h"
#include "OSMWay.h"
#include "OSMRelation.h"
#include "OSMDatabaseAPI.h"
#include "m1.h"
#include "StreetsDatabaseAPI.h"
#include <vector>
#include "unordered_map"
#include <unordered_set>
#include <algorithm>
#include <iostream>
#include <string>

//constants
constexpr int VERY_CLOSE_LEVEL = 18;
constexpr int RE_FOCUS_LEVEL = 11;
constexpr int EXPRESSWAY_SPEED = 80;
constexpr int MAJOR_SPEED = 50;
constexpr int ROAD_ZOOM_LEVEL = 5;
constexpr int ROAD_DIFFERENCE = 3;
constexpr int DETAILED_LEVEL = 8;
constexpr int MORE_DETAILED_LEVEL = 10;
constexpr int SAMPLE_CONSTANT = 2;
constexpr double TEXT_TOLERANCE = 0.2;

//global variable
t_point press_location;
bool searchBar1Editing = false;
bool searchBar2Editing = false;
bool searchBar1AutoFill = false;
bool searchBar2AutoFill = false;
std::string searchBar1Text = "";
std::string searchBar2Text = ""; 
std::string option1 = "";
std::string option2 = "";
char key_input;

extern std::unordered_map<std::string, std::vector<unsigned>> streetHT;
extern std::vector<std::vector<unsigned>> intersectionSeg;
extern std::vector<std::vector<unsigned>> streetSeg;
extern std::vector<LatLon> positionInt;
extern std::vector<LatLon> positionPOI;
extern std::vector<std::unordered_set<unsigned>> streetInt;
extern int zoom_level;

extern std::unordered_map<std::string, std::vector<unsigned>> POIname;
extern std::vector<std::pair<long double, unsigned>> area_of_index;
extern std::vector<unsigned> openfeatures;
extern std::vector<FeatureType> feature_type;
double AvgLat;


bool loadmap();
bool showPOI = false;
t_bound_box bounds();

//draw and functionality of search bar
t_bound_box search_bar1_location();
t_bound_box search_bar2_location();
t_bound_box search_bar1_option1_location();
t_bound_box search_bar1_option2_location();
t_bound_box search_bar2_option1_location();
t_bound_box search_bar2_option2_location();
bool check_valid_range(t_point bottom_left, t_point top_right);
void draw_search_bar();
void find_button_action(void drawscreen());
std::vector<std::string> findAllSimilarStreet(std::string str);
void drawAutoFill();

//reaction functions to mouse and keyboard
void act_on_button_press(float x, float y, t_event_buttonPressed event);
void act_on_mouse_move(float x, float y);
void act_on_key_press(char c, int keysym);

//functions used in draw screen
void drawRoad();
void drawPOI();
void drawFeature();
void drawIntersect();
void drawNames();

//draw screen and map
void drawscreen();
void draw_map();

//helper functions of drawing feature
void openFeature(unsigned i);
void closeFeature(unsigned i);
bool Feature_close(unsigned FeatureID);
void show_point_of_interest(void drawscreen());

//display names & helper functions
void drawStreetNames();
void drawFeatureNames();
void drawPOINames();
t_point find_center(unsigned i);

#endif /* M2_FUNCTION_DECLARATION_H */

