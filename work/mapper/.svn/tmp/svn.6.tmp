/* 
 * Copyright 2018 University of Toronto
 *
 * Permission is hereby granted, to use this software and associated 
 * documentation files (the "Software") in course work at the University 
 * of Toronto, or for personal use. Other uses are prohibited, in 
 * particular the distribution of the Software either publicly or to third 
 * parties.
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include "m1.h"
#include "StreetsDatabaseAPI.h"
#include "unordered_map"
#include <vector>
#include <algorithm>
#include <math.h>


//global variables
//hash table for streets: use name as key, vector(store street id) as data
std::unordered_map<std::string, std::vector<unsigned>> streetHT;
//vector for intersections: use index match intersection id, and storing vector of segments id connect to the intersection
std::vector<std::vector<unsigned>> intersectionSeg;
//vector to store vector of seg id connect to each road, index=street id
std::vector<std::vector<unsigned>> streetSeg;




bool load_map(std::string map_path) {
    bool load_successful = false; //Indicates whether the map has loaded 
                                  //successfully
    load_successful=loadStreetsDatabaseBIN(map_path);
    
    if(!load_successful) return false;
    else {
        streetSeg.resize(getNumberOfStreets());
        intersectionSeg.resize(getNumberOfIntersections());
        
        for(unsigned i=0; i<getNumberOfStreetSegments();i++){
            streetSeg[getStreetSegmentInfo(i).streetID].insert(streetSeg[getStreetSegmentInfo(i).streetID].begin(), i);            //insert seg id into sub vector  
            intersectionSeg[getStreetSegmentInfo(i).from].insert(intersectionSeg[getStreetSegmentInfo(i).from].begin(), i);  std::so        
            intersectionSeg[getStreetSegmentInfo(i).to].insert(intersectionSeg[getStreetSegmentInfo(i).to].begin(), i);
        }
        
        for(unsigned i=0; i<getNumberOfStreets();i++){
            std::vector<unsigned> temp{i};
            if(streetHT.find(getStreetName(i))==streetHT.end()) streetHT.emplace(getStreetName(i),temp);
            else streetHT[getStreetName(i)].insert(streetHT[getStreetName(i)].end(),i );    
        }
        
    }
    load_successful = true; //Make sure this is updated to reflect whether
                            //loading the map succeeded or failed

    return load_successful;
}

void close_map() {
    //Clean-up your map related data structures here
    closeStreetDatabase(); 
}


//Returns street id(s) for the given street name
//If no street with this name exists, returns a 0-length vector.
std::vector<unsigned> find_street_ids_from_name(std::string street_name){return streetHT[street_name]; }

//Returns the street segments for the given intersection 
std::vector<unsigned> find_intersection_street_segments(unsigned intersection_id){return intersectionSeg[intersection_id];}

//Returns the street names at the given intersection (includes duplicate street 
//names in returned vector)
/* 1. using intersection id to find out the vector with segment id (intersectionSeg)
   2. using segment id to find out the vector of street id (streetSeg)
   3. using street id to find out the vector of street name (streetHT)*/
std::vector<std::string> find_intersection_street_names(unsigned intersection_id){
    std::vector<unsigned> found_intersection_segment_id = intersectionSeg[intersection_id];//vector with segment id(step1))
    std::vector<unsigned> street_id_found;//vector of street id(step2))
    
    //loop the vector with segment id
    for (unsigned j = 0; j < found_intersection_segment_id.size(); j++)  {
        //loop the vector in each segment id vector. Once found the target segment id, break the loop
        for (unsigned i = 0; i < streetSeg.size(); i++)  {
            auto find_street_id = std::find(streetSeg[i].begin(), streetSeg[i].end(), found_intersection_segment_id[j]);
            //the target segment id found! store it in the street id vector and break the loop
            if (find_street_id != streetSeg[i].end()){
                street_id_found.push_back(i);
                break;
            }                
        }
    }    
    
    std::vector<std::string> street_name_found;
    //loop the vector with street id
    for (unsigned j = 0; j < street_id_found.size(); j++)    {
        //loop the map to find the target street id. Once found, break the loop
        for (auto i = streetHT.begin(); i != streetHT.end(); i++)   {
            auto find_street_name = std::find((i->second).begin(), (i->second).end(), street_id_found[j]);
            //the target street id found! store it in the street name vector and break the loop
            if (find_street_name != (i->second).end()){
                street_name_found.push_back(i->first);
                break;
            }
        }
    }
    return street_name_found;
}

//Returns true if you can get from intersection1 to intersection2 using a single 
//street segment (hint: check for 1-way streets too)
//corner case: an intersection is considered to be connected to itself
bool are_directly_connected(unsigned intersection_id1, unsigned intersection_id2){
    //check if the two intersections are the same one
     if (intersection_id1 == intersection_id2)
        return true;
    
    bool is_next_to = false;
    unsigned found_segment_id;//used to check if this segment is oneWay
    //store vector of segment id of intersection id1 and id2
    std::vector<unsigned> intersectionSeg_id1 = intersectionSeg[intersection_id1];
    std::vector<unsigned> intersectionSeg_id2 = intersectionSeg[intersection_id2];
    //check if they have common segment id
    for (unsigned i = 1; i < intersectionSeg_id1.size(); ++i)    {
        auto find_in_id2 = std::find(intersectionSeg_id2.begin(), intersectionSeg_id2.end(), intersectionSeg_id1[i]);
        //they have the common segment id
        if (find_in_id2 != intersectionSeg_id2.end())   {
            is_next_to = true;
            found_segment_id = *find_in_id2;
            break;
        }
    }

    //check if intersection_id1 is next to intersection_id2. and then check if one way.
    if (is_next_to == true) {
        bool is_oneWay = getStreetSegmentInfo(found_segment_id).oneWay;   
        if (is_oneWay == true)  {
            //the segment is oneWay, check if now is from id1 to id2
            if (intersection_id1 == getStreetSegmentInfo(found_segment_id).from)
                return true;
            else
                return false;            
        }
            return true;
    }
    //intersection_id1 is not next to intersection_id2
    return false;
}

//Returns all intersections reachable by traveling down one street segment 
//from given intersection (hint: you can't travel the wrong way on a 1-way street)
//the returned vector should NOT contain duplicate intersections
std::vector<unsigned> find_adjacent_intersections(unsigned intersection_id){
    std::vector<unsigned> segs=find_intersection_street_segments(intersection_id);
    std::vector<unsigned> adj;
    for(unsigned i=0; i<segs.size();i++){
         
        if(getStreetSegmentInfo(segs[i]).from==intersection_id){
            adj.insert(adj.begin(), getStreetSegmentInfo(segs[i]).to);
        }
        else if(!getStreetSegmentInfo(segs[i]).oneWay){
            adj.insert(adj.begin(), getStreetSegmentInfo(segs[i]).from);
        }    
        
        
       
    }
    
    return adj;
}

//Returns all street segments for the given street
//Search every segments and find relevant segments by streetID
std::vector<unsigned> find_street_street_segments(unsigned street_id){return streetSeg[street_id];}

//Returns all intersections along the a given street
std::vector<unsigned> find_all_street_intersections(unsigned street_id){
    std::vector<unsigned> intersections;
    std::vector<unsigned> segs=find_street_street_segments(street_id);
    for(unsigned i=0; i<segs.size();i++) {
        if(std::find(intersections.begin(), intersections.end(), getStreetSegmentInfo(segs[i]).from)==intersections.end())
            intersections.insert(intersections.begin(), getStreetSegmentInfo(segs[i]).from);
        if(std::find(intersections.begin(), intersections.end(), getStreetSegmentInfo(segs[i]).to)==intersections.end())
            intersections.insert(intersections.begin(), getStreetSegmentInfo(segs[i]).to);
    
    }

    return intersections;

}

//Return all intersection ids for two intersecting streets
//This function will typically return one intersection id.
//However street names are not guarenteed to be unique, so more than 1 intersection id
//may exist
std::vector<unsigned> find_intersection_ids_from_street_names(std::string street_name1, 
                                                              std::string street_name2){
    std::vector<unsigned> streetID1=find_street_ids_from_name(street_name1);
    std::vector<unsigned> streetID2=find_street_ids_from_name(street_name2);
    std::vector<unsigned> intersections;
    for(unsigned i=0; i<streetID1.size(); i++){
        for(unsigned j=0; j<streetID2.size();j++){
            std::vector<unsigned> itsc1=find_all_street_intersections( streetID1[i]);
            std::vector<unsigned> itsc2=find_all_street_intersections( streetID2[j]);
            for(unsigned k=0; k<itsc1.size();k++){
                if(std::find(itsc2.begin(), itsc2.end(), itsc1[k])!=itsc2.end()){
                    intersections.insert(intersections.begin(), itsc1[k]);
                    break;
                }
            }
        }
    }
    return intersections;
}

//Returns the distance between two coordinates in meters
double find_distance_between_two_points(LatLon point1, LatLon point2){
    double x1 = point1.lat();
    double y1 = point1.lon();
    double x2 = point2.lat();
    double y2 = point2.lon();
    return EARTH_RADIUS_IN_METERS * sqrt(pow((y2 - y1) ,2) + pow((x2 - x1) , 2));
}

//Returns the length of the given street segment in meters
double find_street_segment_length(unsigned street_segment_id){
    unsigned curve_point_number = getStreetSegmentInfo(street_segment_id).curvePointCount;
    unsigned start_point_ID = getStreetSegmentInfo(street_segment_id).from;
    unsigned end_point_ID = getStreetSegmentInfo(street_segment_id).to;
    if (curve_point_number == 0){
        return find_distance_between_two_points(getIntersectionPosition(start_point_ID), getIntersectionPosition(end_point_ID));
    } else{
        double whole_length = find_distance_between_two_points(getIntersectionPosition(start_point_ID), getStreetSegmentCurvePoint(street_segment_id, 1));
        for (unsigned i = 1; i < curve_point_number; i++) {
            whole_length  = whole_length + find_distance_between_two_points(getStreetSegmentCurvePoint(street_segment_id, i), getStreetSegmentCurvePoint(street_segment_id, i+ 1));
        }
        whole_length  = whole_length + find_distance_between_two_points(getStreetSegmentCurvePoint(street_segment_id, curve_point_number), getIntersectionPosition(end_point_ID));
        return whole_length;
    }
}

//Returns the length of the specified street in meters
double find_street_length(unsigned street_id){
    
}

//Returns the travel time to drive a street segment in seconds 
//(time = distance/speed_limit)
double find_street_segment_travel_time(unsigned street_segment_id){
    return find_street_segment_length(street_segment_id) / getStreetSegmentInfo(street_segment_id).speedLimit;
}

//Returns the nearest point of interest to the given position
unsigned find_closest_point_of_interest(LatLon my_position){
    double distance=std::numeric_limits<float>::infinity();
    unsigned index;
    for(unsigned i=0; i<getNumberOfPointsOfInterest(); i++){
        double temp=find_distance_between_two_points(getPointOfInterestPosition(i), my_position);
        if(temp<distance){ distance=temp; index=i; }
    }

    return index;
}

//Returns the the nearest intersection to the given position
unsigned find_closest_intersection(LatLon my_position){
    double distance=std::numeric_limits<float>::infinity();
    unsigned index;
    for(unsigned i=0; i<getNumberOfIntersections(); i++){
        double temp=find_distance_between_two_points(getIntersectionPosition(i), my_position);
        if(temp<distance){ distance=temp; index=i; }
    }

    return index;
}

